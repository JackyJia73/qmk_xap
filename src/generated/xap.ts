// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

export const commands = {
    async xapVersion(id: string): Promise<Result<XapVersionResponse, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('xap_version', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async xapCapabilities(id: string): Promise<Result<XapCapabilitiesFlags, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('xap_capabilities', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async xapEnabledSubsystemCapabilities(
        id: string,
    ): Promise<Result<XapEnabledSubsystemCapabilitiesFlags, Error>> {
        try {
            return {
                status: 'ok',
                data: await TAURI_INVOKE('xap_enabled_subsystem_capabilities', { id }),
            }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async xapSecureStatus(id: string): Promise<Result<XapSecureStatusResponse, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('xap_secure_status', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async xapSecureUnlock(id: string): Promise<Result<null, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('xap_secure_unlock', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async xapSecureLock(id: string): Promise<Result<null, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('xap_secure_lock', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async qmkVersion(id: string): Promise<Result<QmkVersionResponse, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('qmk_version', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async qmkCapabilities(id: string): Promise<Result<QmkCapabilitiesFlags, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('qmk_capabilities', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async qmkBoardIdentifiers(id: string): Promise<Result<QmkBoardIdentifiersResponse, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('qmk_board_identifiers', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async qmkBoardManufacturer(id: string): Promise<Result<QmkBoardManufacturerResponse, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('qmk_board_manufacturer', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async qmkProductName(id: string): Promise<Result<QmkProductNameResponse, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('qmk_product_name', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async qmkConfigBlobLength(id: string): Promise<Result<QmkConfigBlobLengthResponse, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('qmk_config_blob_length', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async qmkConfigBlobChunk(
        id: string,
        arg: number,
    ): Promise<Result<QmkConfigBlobChunkResponse, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('qmk_config_blob_chunk', { id, arg }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async qmkJumpToBootloader(id: string): Promise<Result<QmkJumpToBootloaderResponse, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('qmk_jump_to_bootloader', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async qmkHardwareIdentifier(id: string): Promise<Result<QmkHardwareIdentifierResponse, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('qmk_hardware_identifier', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async qmkReinitializeEeprom(id: string): Promise<Result<QmkReinitializeEepromResponse, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('qmk_reinitialize_eeprom', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async keymapCapabilities(id: string): Promise<Result<KeymapCapabilitiesFlags, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('keymap_capabilities', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async keymapGetLayerCount(id: string): Promise<Result<KeymapGetLayerCountResponse, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('keymap_get_layer_count', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async keymapGetKeycode(
        id: string,
        arg: KeymapGetKeycodeArg,
    ): Promise<Result<KeymapGetKeycodeResponse, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('keymap_get_keycode', { id, arg }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async keymapGetEncoderKeycode(
        id: string,
        arg: KeymapGetEncoderKeycodeArg,
    ): Promise<Result<KeymapGetEncoderKeycodeResponse, Error>> {
        try {
            return {
                status: 'ok',
                data: await TAURI_INVOKE('keymap_get_encoder_keycode', { id, arg }),
            }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async remappingCapabilities(id: string): Promise<Result<RemappingCapabilitiesFlags, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('remapping_capabilities', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async remappingGetLayerCount(
        id: string,
    ): Promise<Result<RemappingGetLayerCountResponse, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('remapping_get_layer_count', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async remappingSetKeycode(
        id: string,
        arg: RemappingSetKeycodeArg,
    ): Promise<Result<null, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('remapping_set_keycode', { id, arg }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async remappingSetEncoderKeycode(
        id: string,
        arg: RemappingSetEncoderKeycodeArg,
    ): Promise<Result<null, Error>> {
        try {
            return {
                status: 'ok',
                data: await TAURI_INVOKE('remapping_set_encoder_keycode', { id, arg }),
            }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async lightingCapabilities(id: string): Promise<Result<LightingCapabilitiesFlags, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('lighting_capabilities', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async backlightCapabilities(id: string): Promise<Result<BacklightCapabilitiesFlags, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('backlight_capabilities', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async backlightGetEnabledEffects(
        id: string,
    ): Promise<Result<BacklightGetEnabledEffectsResponse, Error>> {
        try {
            return {
                status: 'ok',
                data: await TAURI_INVOKE('backlight_get_enabled_effects', { id }),
            }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async backlightGetConfig(id: string): Promise<Result<BacklightConfig, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('backlight_get_config', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async backlightSetConfig(id: string, arg: BacklightConfig): Promise<Result<null, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('backlight_set_config', { id, arg }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async backlightSaveConfig(id: string): Promise<Result<null, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('backlight_save_config', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async rgblightCapabilities(id: string): Promise<Result<RgblightCapabilitiesFlags, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('rgblight_capabilities', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async rgblightGetEnabledEffects(
        id: string,
    ): Promise<Result<RgblightGetEnabledEffectsResponse, Error>> {
        try {
            return {
                status: 'ok',
                data: await TAURI_INVOKE('rgblight_get_enabled_effects', { id }),
            }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async rgblightGetConfig(id: string): Promise<Result<RgbLightConfig, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('rgblight_get_config', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async rgblightSetConfig(id: string, arg: RgbLightConfig): Promise<Result<null, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('rgblight_set_config', { id, arg }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async rgblightSaveConfig(id: string): Promise<Result<null, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('rgblight_save_config', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async rgbmatrixCapabilities(id: string): Promise<Result<RgbmatrixCapabilitiesFlags, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('rgbmatrix_capabilities', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async rgbmatrixGetEnabledEffects(
        id: string,
    ): Promise<Result<RgbmatrixGetEnabledEffectsResponse, Error>> {
        try {
            return {
                status: 'ok',
                data: await TAURI_INVOKE('rgbmatrix_get_enabled_effects', { id }),
            }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async rgbmatrixGetConfig(id: string): Promise<Result<RgbMatrixConfig, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('rgbmatrix_get_config', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async rgbmatrixSetConfig(id: string, arg: RgbMatrixConfig): Promise<Result<null, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('rgbmatrix_set_config', { id, arg }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async rgbmatrixSaveConfig(id: string): Promise<Result<null, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('rgbmatrix_save_config', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async audioCapabilities(id: string): Promise<Result<AudioCapabilitiesFlags, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('audio_capabilities', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async audioGetConfig(id: string): Promise<Result<AudioConfig, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('audio_get_config', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async audioSetConfig(id: string, arg: AudioConfig): Promise<Result<null, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('audio_set_config', { id, arg }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async audioSaveConfig(id: string): Promise<Result<null, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('audio_save_config', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async xapConstantsGet(): Promise<XapConstants> {
        return await TAURI_INVOKE('xap_constants_get')
    },
    async remapKey(id: string, arg: RemappingSetKeycodeArg): Promise<Result<null, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('remap_key', { id, arg }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async keymapGet(id: string, layout: string): Promise<Result<MappedKeymap, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('keymap_get', { id, layout }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
    async deviceGet(id: string): Promise<Result<XapDeviceState, Error>> {
        try {
            return { status: 'ok', data: await TAURI_INVOKE('device_get', { id }) }
        } catch (e) {
            if (e instanceof Error) throw e
            else return { status: 'error', error: e as any }
        }
    },
}

export const events = __makeEvents__<{
    xapEvent: XapEvent
}>({
    xapEvent: 'xap-event',
})

/** user-defined types **/

export type AudioCapabilitiesFlags = number
/**
 * Config for audio subsystem
 */
export type AudioConfig = { enable: number; clicky_enable: number }
export type BacklightCapabilitiesFlags = number
/**
 * Config for lighting subsystem
 */
export type BacklightConfig = { enable: number; mode: number; val: number }
export type BacklightGetEnabledEffectsResponse = number
export type Config = { layouts: { [key in string]: Layout }; matrix_size: Point2D }
export type Error = string
export type KeyCode = {
    code?: number
    key: string
    group?: string | null
    label?: string | null
    aliases?: string[]
}
export type KeymapCapabilitiesFlags = number
export type KeymapGetEncoderKeycodeArg = { layer: number; encoder: number; clockwise: number }
export type KeymapGetEncoderKeycodeResponse = number
export type KeymapGetKeycodeArg = { layer: number; row: number; column: number }
export type KeymapGetKeycodeResponse = number
export type KeymapGetLayerCountResponse = number
export type KeymapInfo = {
    layer_count: number | null
    get_keycode_enabled: boolean
    get_encoder_keycode_enabled: boolean
}
export type KeymapKey = { code: KeyCode; position: Point3D }
export type Layout = { layout: LayoutEntry[] }
export type LayoutEntry = {
    matrix: Point2D
    x: number
    y: number
    w?: number
    h?: number
    r?: number
    rx?: number
    ry?: number
}
export type LightingCapabilities = {
    effects: LightingEffect[]
    get_config_enabled: boolean
    set_config_enabled: boolean
    save_config_enabled: boolean
}
export type LightingCapabilitiesFlags = number
export type LightingEffect = { code?: number; key: string; group: string | null; label?: string }
export type LightingEffects = {
    groups: { [key in string]: LightingGroup } | null
    effects: { [key in number]: LightingEffect }
}
export type LightingGroup = { define: string }
export type LightingInfo = {
    backlight: LightingCapabilities | null
    rgblight: LightingCapabilities | null
    rgbmatrix: LightingCapabilities | null
}
export type MappedKeymap = {
    keys: (MappedKeymapKey | null)[][][]
    dimensions: Point3D
    size: Point2D
}
export type MappedKeymapKey = { key: KeymapKey; layout: LayoutEntry }
export type Point2D = { y: bigint; x: bigint }
export type Point3D = { x: bigint; y: bigint; z: bigint }
export type QmkBoardIdentifiersResponse = {
    vendor_id: number
    product_id: number
    product_version: number
    qmk_unique_identifier: number
}
export type QmkBoardManufacturerResponse = UTF8String
export type QmkCapabilitiesFlags = number
export type QmkConfigBlobChunkResponse = [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
]
export type QmkConfigBlobLengthResponse = number
export type QmkHardwareIdentifierResponse = [number, number, number, number]
export type QmkInfo = {
    version: string
    board_ids: QmkBoardIdentifiersResponse
    manufacturer: string
    product_name: string
    hardware_id: string
    jump_to_bootloader_enabled: boolean
    eeprom_reset_enabled: boolean
}
export type QmkJumpToBootloaderResponse = number
export type QmkProductNameResponse = UTF8String
export type QmkReinitializeEepromResponse = number
export type QmkVersionResponse = number
export type RemapInfo = {
    layer_count: number | null
    set_keycode_enabled: boolean
    set_encoder_keycode_enabled: boolean
}
export type RemappingCapabilitiesFlags = number
export type RemappingGetLayerCountResponse = number
export type RemappingSetEncoderKeycodeArg = {
    layer: number
    encoder: number
    clockwise: number
    keycode: number
}
export type RemappingSetKeycodeArg = { layer: number; row: number; column: number; keycode: number }
/**
 * RGB config for RGB lighting subsystem
 */
export type RgbLightConfig = {
    enable: number
    mode: number
    hue: number
    sat: number
    val: number
    speed: number
}
/**
 * RGB config for RGB matrix subsystem
 */
export type RgbMatrixConfig = {
    enable: number
    mode: number
    hue: number
    sat: number
    val: number
    speed: number
    flags: number
}
export type RgblightCapabilitiesFlags = number
export type RgblightGetEnabledEffectsResponse = bigint
export type RgbmatrixCapabilitiesFlags = number
export type RgbmatrixGetEnabledEffectsResponse = bigint
export type UTF8String = string
export type XapCapabilitiesFlags = number
export type XapConstants = {
    keycodes: XapKeyCodeCategory[]
    rgblight_modes: LightingEffects
    rgb_matrix_modes: LightingEffects
    led_matrix_modes: LightingEffects
}
export type XapDeviceInfo = {
    xap: XapInfo
    qmk: QmkInfo
    keymap: KeymapInfo | null
    remap: RemapInfo | null
    lighting: LightingInfo | null
}
export type XapDeviceState = {
    id: string
    info: XapDeviceInfo | null
    config: Config
    secure_status: XapSecureStatus
}
export type XapEnabledSubsystemCapabilitiesFlags = number
export type XapEvent =
    | { kind: 'LogReceived'; data: { id: string; log: string } }
    | { kind: 'SecureStatusChanged'; data: { id: string; secure_status: XapSecureStatus } }
    | { kind: 'NewDevice'; data: { id: string } }
    | { kind: 'RemovedDevice'; data: { id: string } }
export type XapInfo = { version: number }
export type XapKeyCodeCategory = { name: string; codes: KeyCode[] }
export type XapSecureStatus = 'Locked' | 'Unlocking' | 'Unlocked'
export type XapSecureStatusResponse = number
export type XapVersionResponse = number

/** tauri-specta globals **/

import { invoke as TAURI_INVOKE } from '@tauri-apps/api/core'
import * as TAURI_API_EVENT from '@tauri-apps/api/event'
import { type WebviewWindow as __WebviewWindow__ } from '@tauri-apps/api/webviewWindow'

type __EventObj__<T> = {
    listen: (cb: TAURI_API_EVENT.EventCallback<T>) => ReturnType<typeof TAURI_API_EVENT.listen<T>>
    once: (cb: TAURI_API_EVENT.EventCallback<T>) => ReturnType<typeof TAURI_API_EVENT.once<T>>
    emit: T extends null
        ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
        : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>
}

export type Result<T, E> = { status: 'ok'; data: T } | { status: 'error'; error: E }

function __makeEvents__<T extends Record<string, any>>(mappings: Record<keyof T, string>) {
    return new Proxy(
        {} as unknown as {
            [K in keyof T]: __EventObj__<T[K]> & {
                (handle: __WebviewWindow__): __EventObj__<T[K]>
            }
        },
        {
            get: (_, event) => {
                const name = mappings[event as keyof T]

                return new Proxy((() => {}) as any, {
                    apply: (_, __, [window]: [__WebviewWindow__]) => ({
                        listen: (arg: any) => window.listen(name, arg),
                        once: (arg: any) => window.once(name, arg),
                        emit: (arg: any) => window.emit(name, arg),
                    }),
                    get: (_, command: keyof __EventObj__<any>) => {
                        switch (command) {
                            case 'listen':
                                return (arg: any) => TAURI_API_EVENT.listen(name, arg)
                            case 'once':
                                return (arg: any) => TAURI_API_EVENT.once(name, arg)
                            case 'emit':
                                return (arg: any) => TAURI_API_EVENT.emit(name, arg)
                        }
                    },
                })
            },
        },
    )
}
